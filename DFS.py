"""
	Обход графа в глубину. Функция DFS возвращает словарь из пар {ключ:значение}, где ключ - вершина, 
	а значение это вершина, с которой можно добраться до исходной (той, что в ключе). Входной граф 
	представляется в виде матрицы смежности. По словарю строится остовное дерево и возвращается 
	в виде матрицы смежности при помощи функции build_tree(L).
"""
import myStack

def main():
	G = [[0,1,0,0,0,0,1,1],
		 [1,0,1,0,0,0,0,0],
		 [0,1,0,1,0,1,0,0],
		 [0,0,1,0,1,0,0,0],
		 [0,0,0,1,0,0,0,0],
		 [0,0,1,0,0,0,0,0],
		 [1,0,0,0,0,0,0,1],
		 [1,0,0,0,0,0,1,0]]
	#L = DFS(G)
	#print(L)

#Функция нахождение смежых вершин
def get_adjacent_vertex(G,i,S,L):
	for i in range(0, len(G)):
		if G[i][j] == 1 and not S.hasElem(j) or not in L:
			return j
		return -1

if __name__ == "__main__":
	main()